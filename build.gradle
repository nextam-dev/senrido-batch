buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

group = 'jp.co.senrido'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources

repositories {
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

configurations {
	//providedRuntime
	domaGenRuntime
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-batch')
	compile('org.seasar.doma.boot:doma-spring-boot-starter:1.1.0')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.apache.velocity:velocity-engine-core:2.0')
	compile('org.apache.velocity:velocity-engine-core:2.0')
	compile('org.apache.commons:commons-lang3:3.1')
    compile('org.apache.commons:commons-compress:1.14')
    compile('org.apache.httpcomponents:httpclient:4.5')
    compile('org.apache.httpcomponents:httpmime:4.5.7')
    compile('commons-collections:commons-collections:3.2.1')
    compile('commons-codec:commons-codec')
    compile('commons-digester:commons-digester:2.1')
    compile('commons-io:commons-io:2.5')
    compile('org.postgresql:postgresql')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	def domaGenVersion = "2.19.2"
	domaGenRuntime("org.seasar.doma:doma-gen:${domaGenVersion}")
    domaGenRuntime('com.microsoft.sqlserver:mssql-jdbc:8.4.1.jre8')
    compile group: 'net.arnx', name: 'jsonic', version: '1.3.10'
}

eclipse {
  classpath {
    defaultOutputDir = file('bin/main')

    file.whenMerged {
      entries.each { entry ->
        if (entry.kind == 'src' && entry.hasProperty('output')) {
          entry.output = null
        }
      }
    }
  }
}

task gen << {
    ant.taskdef(resource: 'domagentask.properties',
        classpath: configurations.domaGenRuntime.asPath)
    ant.gen(url: 'jdbc:sqlserver://10.1.100.202;database=MyPageDB2', user: 'sa', password: 'Mu34N04dm1n') {
        entityConfig(packageName: 'jp.nextam.demo.entity')
        daoConfig(packageName: 'jp.nextam.demo.dao')
        sqlConfig()
    }
}
